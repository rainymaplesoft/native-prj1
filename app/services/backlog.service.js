"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var static_data_1 = require("../shared/static-data");
var _ = require("lodash");
var BacklogService = (function () {
    function BacklogService() {
        this._allItems = ITEMS;
    }
    Object.defineProperty(BacklogService.prototype, "items", {
        get: function () {
            return this._allItems;
        },
        enumerable: true,
        configurable: true
    });
    BacklogService.prototype.getItem = function (id) {
        var selectedItem = _.find(this._allItems, function (i) { return i.id == id; });
        return Promise.resolve(selectedItem);
    };
    BacklogService.prototype.addNewPTItem = function (newItem, item) {
    };
    BacklogService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], BacklogService);
    return BacklogService;
}());
exports.BacklogService = BacklogService;
var ITEMS = [
    { id: '1', title: 'item 1', description: 'item 1 desc', estimate: 5, priority: static_data_1.PriorityEnum.Low, status: static_data_1.StatusEnum.Open, tasks: [], type: static_data_1.ItemTypeEnum.Bug, dateCreated: new Date(), dateModified: new Date(), comments: [], assignee: null },
    { id: '2', title: 'item 2', description: 'item 2 desc', estimate: 10, priority: static_data_1.PriorityEnum.Medium, status: static_data_1.StatusEnum.ReOpened, tasks: [], type: static_data_1.ItemTypeEnum.PBI, dateCreated: new Date(), dateModified: new Date(), comments: [], assignee: null },
    { id: '3', title: 'item 3', description: 'item 3 desc', estimate: 12, priority: static_data_1.PriorityEnum.High, status: static_data_1.StatusEnum.Open, tasks: [], type: static_data_1.ItemTypeEnum.Chore, dateCreated: new Date(), dateModified: new Date(), comments: [], assignee: null },
    { id: '4', title: 'item 4', description: 'item 4 desc', estimate: 6, priority: static_data_1.PriorityEnum.Critical, status: static_data_1.StatusEnum.Open, tasks: [], type: static_data_1.ItemTypeEnum.Impediment, dateCreated: new Date(), dateModified: new Date(), comments: [], assignee: null },
    { id: '5', title: 'item 5', description: 'item 5 desc', estimate: 20, priority: static_data_1.PriorityEnum.Low, status: static_data_1.StatusEnum.Open, tasks: [], type: static_data_1.ItemTypeEnum.Bug, dateCreated: new Date(), dateModified: new Date(), comments: [], assignee: null }
];
var ITEM = { id: '1', title: 'item 1', description: 'item 1 desc', estimate: 5, priority: static_data_1.PriorityEnum.Low, status: static_data_1.StatusEnum.Open, tasks: [], type: static_data_1.ItemTypeEnum.Bug, dateCreated: new Date(), dateModified: new Date(), comments: [], assignee: null };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2xvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYmFja2xvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLHFEQUErRTtBQUMvRSwwQkFBMkI7QUFPM0I7SUFPSTtRQUNJLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQzNCLENBQUM7SUFMRCxzQkFBVyxpQ0FBSzthQUFoQjtZQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzFCLENBQUM7OztPQUFBO0lBS00sZ0NBQU8sR0FBZCxVQUFlLEVBQVU7UUFDckIsSUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQVYsQ0FBVSxDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUNNLHFDQUFZLEdBQW5CLFVBQW9CLE9BQWlCLEVBQUUsSUFBUztJQUVoRCxDQUFDO0lBakJRLGNBQWM7UUFEMUIsaUJBQVUsRUFBRTs7T0FDQSxjQUFjLENBa0IxQjtJQUFELHFCQUFDO0NBQUEsQUFsQkQsSUFrQkM7QUFsQlksd0NBQWM7QUFvQjNCLElBQU0sS0FBSyxHQUFjO0lBQ3JCLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsMEJBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLHdCQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLDBCQUFZLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtJQUM5TyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLDBCQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSx3QkFBVSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSwwQkFBWSxDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7SUFDdFAsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSwwQkFBWSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsd0JBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsMEJBQVksQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsWUFBWSxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO0lBQ2xQLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsMEJBQVksQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLHdCQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLDBCQUFZLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtJQUMxUCxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLDBCQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSx3QkFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSwwQkFBWSxDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7Q0FDbFAsQ0FBQztBQUdGLElBQU0sSUFBSSxHQUNOLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsMEJBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLHdCQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLDBCQUFZLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFlBQVksRUFBRSxJQUFJLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJdGVtVHlwZUVudW0sIFByaW9yaXR5RW51bSwgU3RhdHVzRW51bSB9IGZyb20gXCIuLi9zaGFyZWQvc3RhdGljLWRhdGFcIjtcclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnXHJcblxyXG5pbXBvcnQgeyBQVERvbWFpbiB9IGZyb20gXCIuLi90eXBpbmdzL2RvbWFpblwiO1xyXG5pbXBvcnQgSVBUSXRlbSA9IFBURG9tYWluLklQVEl0ZW07XHJcbmltcG9ydCBJTmV3SXRlbSA9IFBURG9tYWluLklOZXdJdGVtO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQmFja2xvZ1NlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgX2FsbEl0ZW1zOiBJUFRJdGVtW107XHJcblxyXG4gICAgcHVibGljIGdldCBpdGVtcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fYWxsSXRlbXM7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9hbGxJdGVtcyA9IElURU1TO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRJdGVtKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZEl0ZW0gPSBfLmZpbmQodGhpcy5fYWxsSXRlbXMsIGkgPT4gaS5pZCA9PSBpZCk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzZWxlY3RlZEl0ZW0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGFkZE5ld1BUSXRlbShuZXdJdGVtOiBJTmV3SXRlbSwgaXRlbTogYW55KSB7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBJVEVNUzogSVBUSXRlbVtdID0gW1xyXG4gICAgeyBpZDogJzEnLCB0aXRsZTogJ2l0ZW0gMScsIGRlc2NyaXB0aW9uOiAnaXRlbSAxIGRlc2MnLCBlc3RpbWF0ZTogNSwgcHJpb3JpdHk6IFByaW9yaXR5RW51bS5Mb3csIHN0YXR1czogU3RhdHVzRW51bS5PcGVuLCB0YXNrczogW10sIHR5cGU6IEl0ZW1UeXBlRW51bS5CdWcsIGRhdGVDcmVhdGVkOiBuZXcgRGF0ZSgpLCBkYXRlTW9kaWZpZWQ6IG5ldyBEYXRlKCksIGNvbW1lbnRzOiBbXSwgYXNzaWduZWU6IG51bGwgfSxcclxuICAgIHsgaWQ6ICcyJywgdGl0bGU6ICdpdGVtIDInLCBkZXNjcmlwdGlvbjogJ2l0ZW0gMiBkZXNjJywgZXN0aW1hdGU6IDEwLCBwcmlvcml0eTogUHJpb3JpdHlFbnVtLk1lZGl1bSwgc3RhdHVzOiBTdGF0dXNFbnVtLlJlT3BlbmVkLCB0YXNrczogW10sIHR5cGU6IEl0ZW1UeXBlRW51bS5QQkksIGRhdGVDcmVhdGVkOiBuZXcgRGF0ZSgpLCBkYXRlTW9kaWZpZWQ6IG5ldyBEYXRlKCksIGNvbW1lbnRzOiBbXSwgYXNzaWduZWU6IG51bGwgfSxcclxuICAgIHsgaWQ6ICczJywgdGl0bGU6ICdpdGVtIDMnLCBkZXNjcmlwdGlvbjogJ2l0ZW0gMyBkZXNjJywgZXN0aW1hdGU6IDEyLCBwcmlvcml0eTogUHJpb3JpdHlFbnVtLkhpZ2gsIHN0YXR1czogU3RhdHVzRW51bS5PcGVuLCB0YXNrczogW10sIHR5cGU6IEl0ZW1UeXBlRW51bS5DaG9yZSwgZGF0ZUNyZWF0ZWQ6IG5ldyBEYXRlKCksIGRhdGVNb2RpZmllZDogbmV3IERhdGUoKSwgY29tbWVudHM6IFtdLCBhc3NpZ25lZTogbnVsbCB9LFxyXG4gICAgeyBpZDogJzQnLCB0aXRsZTogJ2l0ZW0gNCcsIGRlc2NyaXB0aW9uOiAnaXRlbSA0IGRlc2MnLCBlc3RpbWF0ZTogNiwgcHJpb3JpdHk6IFByaW9yaXR5RW51bS5Dcml0aWNhbCwgc3RhdHVzOiBTdGF0dXNFbnVtLk9wZW4sIHRhc2tzOiBbXSwgdHlwZTogSXRlbVR5cGVFbnVtLkltcGVkaW1lbnQsIGRhdGVDcmVhdGVkOiBuZXcgRGF0ZSgpLCBkYXRlTW9kaWZpZWQ6IG5ldyBEYXRlKCksIGNvbW1lbnRzOiBbXSwgYXNzaWduZWU6IG51bGwgfSxcclxuICAgIHsgaWQ6ICc1JywgdGl0bGU6ICdpdGVtIDUnLCBkZXNjcmlwdGlvbjogJ2l0ZW0gNSBkZXNjJywgZXN0aW1hdGU6IDIwLCBwcmlvcml0eTogUHJpb3JpdHlFbnVtLkxvdywgc3RhdHVzOiBTdGF0dXNFbnVtLk9wZW4sIHRhc2tzOiBbXSwgdHlwZTogSXRlbVR5cGVFbnVtLkJ1ZywgZGF0ZUNyZWF0ZWQ6IG5ldyBEYXRlKCksIGRhdGVNb2RpZmllZDogbmV3IERhdGUoKSwgY29tbWVudHM6IFtdLCBhc3NpZ25lZTogbnVsbCB9XHJcbl07XHJcblxyXG5cclxuY29uc3QgSVRFTTogSVBUSXRlbSA9XHJcbiAgICB7IGlkOiAnMScsIHRpdGxlOiAnaXRlbSAxJywgZGVzY3JpcHRpb246ICdpdGVtIDEgZGVzYycsIGVzdGltYXRlOiA1LCBwcmlvcml0eTogUHJpb3JpdHlFbnVtLkxvdywgc3RhdHVzOiBTdGF0dXNFbnVtLk9wZW4sIHRhc2tzOiBbXSwgdHlwZTogSXRlbVR5cGVFbnVtLkJ1ZywgZGF0ZUNyZWF0ZWQ6IG5ldyBEYXRlKCksIGRhdGVNb2RpZmllZDogbmV3IERhdGUoKSwgY29tbWVudHM6IFtdLCBhc3NpZ25lZTogbnVsbCB9OyJdfQ==